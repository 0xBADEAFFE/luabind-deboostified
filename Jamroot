import os ;
import errors ;

BOOST_ROOT = [ os.environ BOOST_ROOT ] ;

rule debug-message ( txt * )
{
    if --debug-build in [ modules.peek : ARGV ]
    {
        echo [luabind DEBUG] $(txt) ;
    }
}

debug-message figuring out which libraries to link to... ;
debug-message os.name is [ os.name ] ;

if [ os.name ] = NT
{
    errors.user-error *** not implemented ;
}
else if [ os.name ] = LINUX
{
    local includes = [ GLOB /usr/include : lua5.1 ] ;

    if ! $(includes)
    {
        debug-message couldn't find lua include directory ;
    }

    debug-message found lua include directory in $(includes) ;

    lib m : : <link>shared ;
    lib dl : : <link>shared ;
    lib lua : m dl : <name>lua5.1 : : <include>$(includes) ;
}

SOURCES =
    class.cpp
    class_info.cpp
    class_registry.cpp
    class_rep.cpp
    create_class.cpp
    error.cpp
    find_best_match.cpp
    function.cpp
    implicit_cast.cpp
    link_compatibility.cpp
    object_rep.cpp
    open.cpp
    overload_rep.cpp
    pcall.cpp
    ref.cpp
    scope.cpp
    stack_content_by_name.cpp
    weak_ref.cpp
    wrapper_base.cpp ;

usage-requirements =
    <library>lua
    <toolset>msvc,<link>shared:<define>LUABIND_IMPORT=__declspec(dllimport)
    <toolset>msvc,<link>shared:<define>LUABIND_EXPORT=__declspec(dllexport) ;

lib luabind
    : src/$(SOURCES)
    # requirements
    : <define>LUABIND_BUILDING
      <include>. <include>$(BOOST_ROOT)
      $(usage-requirements)
    # default-build
    :
    # usage-requirements
    : <include>. <include>$(BOOST_ROOT)
      $(usage-requirements)
    ;

alias test
  : test//test
  # requirements
  :
  # default-build
  : <link>static <link>shared release debug ;

explicit test ;

